# Aptamer JSON数据一致性修复建议

## 优先级分类

### 🔴 高优先级问题（需要立即修复）

#### 1. URL编码问题
**问题**: 特殊字符在URL中被编码，导致链接无法正常工作
**影响**: 用户无法访问相关页面

**具体案例**:
- `Amyloid beta-peptide` → `%CE%B255-aptamer`
- 建议修复为: `β55-aptamer`

**修复方法**:
```python
# 修复URL编码问题
def fix_url_encoding(url):
    from urllib.parse import unquote
    return unquote(url)
```

#### 2. 完全无关的命名
**问题**: 名称与文件名完全无法关联
**影响**: 用户无法理解数据关系

**具体案例**:
- `Fluorescein` → `FB-1-aptamer`
- `Hoechst` → `II-mini3-4-aptamer`
- `ATP(2)` → `rafl7s-aptamer`

**修复建议**:
- 建立映射表，在显示时提供多种名称选项
- 在JSON中添加别名字段

### 🟡 中优先级问题（需要标准化）

#### 1. 缩写与全称混用
**问题**: 同一类型的数据使用不同的命名方式
**影响**: 数据不一致，影响用户体验

**具体案例**:
- `Vascular Endothelial Growth Factor` → `VEGF-aptamer`
- `Protein kinase C` → `PKC-aptamer`
- `Basic fibroblast growth factor` → `bFGF-aptamer`

**修复建议**:
- 选择一种命名方式（建议使用全称）
- 在JSON中添加标准名称字段

#### 2. 编号系统不一致
**问题**: 编号与文件名不匹配
**影响**: 难以追踪和查找

**具体案例**:
- `ATP(2)` → `rafl7s-aptamer`
- `ATP(3)` → `bG40min-aptamer`
- `HIV-1 Rev protein (1)` → `HIV-1-Rev-protein_59-aptamer`

**修复建议**:
- 建立统一的编号规则
- 在文件名中包含编号信息

### 🟢 低优先级问题（需要优化）

#### 1. 特殊字符处理
**问题**: 特殊字符在不同系统中显示不一致
**影响**: 显示效果不佳

**具体案例**:
- `hTNF α` → `hTNF-α-aptamer`
- `Estrogen receptor α` → `ERα-aptamer`

**修复建议**:
- 统一特殊字符的使用
- 提供HTML实体编码

## 具体修复方案

### 方案1: 添加别名字段（推荐）

在JSON结构中添加别名字段，保持向后兼容：

```json
{
  "name": "Fluorescein",
  "link": "https://aptamer.ribocentre.org/_posts/FB-1-aptamer",
  "aliases": ["FB-1", "Fluorescein aptamer"],
  "standard_name": "Fluorescein aptamer",
  "background_color": "#385dbf",
  "position": {
    "row": 1,
    "column": 5
  }
}
```

### 方案2: 创建映射表

建立独立的映射文件：

```json
{
  "name_mappings": {
    "Fluorescein": {
      "file_name": "FB-1-aptamer",
      "standard_name": "Fluorescein aptamer",
      "aliases": ["FB-1"]
    },
    "ATP(2)": {
      "file_name": "rafl7s-aptamer",
      "standard_name": "ATP aptamer variant 2",
      "aliases": ["rafl7s"]
    }
  }
}
```

### 方案3: 数据库重构

考虑使用更结构化的数据存储：

```sql
CREATE TABLE aptamers (
    id INTEGER PRIMARY KEY,
    standard_name VARCHAR(255),
    display_name VARCHAR(255),
    file_name VARCHAR(255),
    category VARCHAR(100),
    aliases TEXT,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);
```

## 实施步骤

### 第一阶段：紧急修复（1-2周）

1. **修复URL编码问题**
   - 识别所有编码的URL
   - 修复为正确的字符
   - 测试链接有效性

2. **创建基本映射表**
   - 收集所有不一致的案例
   - 建立名称到文件名的映射
   - 验证映射的准确性

### 第二阶段：标准化（2-4周）

1. **建立命名规范**
   - 定义统一的命名规则
   - 确定缩写使用标准
   - 创建命名指南文档

2. **更新JSON结构**
   - 添加别名字段
   - 添加标准名称字段
   - 保持向后兼容

### 第三阶段：优化（1-2周）

1. **用户界面改进**
   - 支持模糊搜索
   - 显示多种名称选项
   - 提供自动补全功能

2. **自动化检查**
   - 开发定期检查脚本
   - 设置CI/CD检查
   - 建立监控机制

## 验证方法

### 1. 功能测试
- 验证所有链接可正常访问
- 检查搜索功能正常工作
- 测试数据导出功能

### 2. 数据完整性测试
- 确保没有数据丢失
- 验证映射的准确性
- 检查JSON格式正确性

### 3. 用户体验测试
- 用户能否找到所需信息
- 搜索结果的准确性
- 页面加载速度

## 风险评估

### 低风险
- 添加新字段不会影响现有功能
- 映射表可以逐步完善

### 中风险
- URL修复可能影响现有链接
- 需要仔细测试所有变更

### 高风险
- 数据库重构需要大量测试
- 可能影响现有用户

## 成功指标

1. **数据一致性**: 达到90%以上的一致性比例
2. **链接有效性**: 100%的链接可正常访问
3. **用户满意度**: 搜索成功率提升20%
4. **维护效率**: 数据更新时间减少50%

---

*建议文档生成时间: 2024年12月*
*基于一致性检查结果制定* 